// Toast.
var video, canvas, file, snapButton, errorMsgElement, helpMenu, notification, controls, ctx, mouseX, mouseY, touchX, touchY, rulerCanvas, rulerCtx, rulerStart, rulerEnd, rulerCm, pixelScale, mouseDown = 0, rulerMode = !1, newRulerEnabled = !0, results = [], points = [], equation = []; function getOffset() { return innerHeight < 600 || innerWidth < 1e3 ? 105 : 55 } function onMobile() { return !!(navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/Windows Phone/i)) } async function init() { const e = { video: { width: innerWidth, height: innerHeight } }; try { const t = await navigator.mediaDevices.getUserMedia(e); window.stream = t, video.srcObject = t } catch (e) { errorMsgElement.style.display = "block", onMobile() ? errorMsgElement.innerHTML = 'Welcome to RiemannWeb! To get started, click the "Upload" button to take a photo.' : errorMsgElement.innerHTML = "Uh oh, an error has occured starting a live video feed! Please upload an image instead.", snapButton.style.display = "none" } } function snap() { video.pause(), snapButton.onclick = retake, snapButton.value = "Retake", canvas.style.display = "block" } function retake() { video.play(), snapButton.onclick = snap, snapButton.value = "Capture", document.getElementById("editor").innerHTML = "", document.getElementById("calculate").style.display = "none", canvas.style.display = "none", ctx.clearRect(0, 0, canvas.width, canvas.height) } function preview() { var e = new FileReader; e.onload = function (e) { document.getElementById("upload").src = e.target.result }, e.readAsDataURL(this.files[0]), canvas.style.display = "block", ctx.clearRect(0, 0, canvas.width, canvas.height), video.style.display = "none", snapButton.value = "Use Camera", snapButton.onclick = clearPreview } function clearPreview() { video.style.display = "block", document.getElementById("upload").src = "", document.getElementById("editor").innerHTML = "", canvas.style.display = "none", ctx.clearRect(0, 0, canvas.width, canvas.height), snapButton.value = "Capture", snapButton.onclick = snap } function helpToggle() { "block" === helpMenu.style.display ? animateCSS(helpMenu, "fadeOutRight", !1, function () { helpMenu.style.display = "none" }) : (helpMenu.style.display = "block", animateCSS(helpMenu, "fadeInRight", !1, null)) } function calculate() { animateCSS(controls, "fadeOutLeft", !1, function () { controls.style.display = "none" }), notification.style.display = "block", animateCSS(notification, "fadeIn", !1, null), rulerCanvas.style.display = "block", rulerMode = !0, results = []; for (var e = 0; e < points.length; e++)null !== points[e] && results.push(areaOfRegion(points[e], .1)) } function getScale() { var e = Math.sqrt(Math.pow(rulerEnd[0] - rulerStart[0], 2) + Math.pow(rulerEnd[1] - rulerStart[1], 2)); return Math.abs(rulerCm) / e } function showConfirmCalculationPrompt() { var e = document.getElementById("drawRulerPrompt"), t = document.getElementById("enterMeasurementPrompt"); newRulerEnabled = !1, animateCSS(e, "fadeOutRight", !1, function () { e.style.display = "none", t.style.display = "block", animateCSS(t, "fadeInLeft", !1, null) }) } function cancelCalculate() { controls.style.display = "block", animateCSS(controls, "fadeInLeft", !1, null), animateCSS(notification, "fadeOut", !1, function () { notification.style.display = "none" }), rulerCtx.clearRect(0, 0, rulerCanvas.width, rulerCanvas.height), rulerCanvas.style.display = "none", rulerMode = !1 } function resetCalculate() { newRulerEnabled = !0, rulerCtx.clearRect(0, 0, rulerCanvas.width, rulerCanvas.height); var e = document.getElementById("drawRulerPrompt"), t = document.getElementById("enterMeasurementPrompt"); animateCSS(t, "fadeOutRight", !1, function () { t.style.display = "none", e.style.display = "block", animateCSS(e, "fadeInLeft", !1, null) }) } function round(e, t) { var n = Math.pow(10, t); return Math.round(e * n) / n } function confirmCalculate() { rulerCm = document.getElementById("scaleInput").value; var e = document.getElementById("fullscreen"), t = document.getElementById("results"); animateCSS(e, "fadeOut", !0, null), t.style.display = "block", animateCSS(t, "fadeIn", !0, null); for (var n = document.getElementById("functions"), a = 0; a < results.length; a++)n.innerHTML += "<h2>Area of Equation " + a + ":</h2><p>" + round(results[a][0] * Math.pow(getScale(), 2), 3) + " cm^2</p><p>Length: " + round(results[a][4] * getScale(), 2) + " cm</p><br />" } function pushEquation() { if ("block" === canvas.style.display && equation.length > 5) { points.push(equation), equation = [], document.getElementById("editor").innerHTML += '<img id="remove' + (points.length - 1) + '" class="remove" src="/img/remove.png" onclick="removeEquation(' + (points.length - 1) + ')" />', document.getElementById("calculate").style.display = "inline-block" } else { for (var e = 0; e < equation.length; e++)ctx.clearRect(equation[e][0] - 8, equation[e][1] - 8, 16, 16); equation = [] } } function removeEquation(e) { var t = points[e]; points[e] = null; for (var n = 0; n < t.length; n++)ctx.clearRect(t[n][0] - 8, t[n][1] - 8, 16, 16); document.querySelector("#remove" + e).remove(), 0 === document.getElementById("editor").childElementCount && (document.getElementById("calculate").style.display = "none") } function drawDot(e, t, n, a) { var o; if (rulerMode && newRulerEnabled) (o = rulerCtx).fillStyle = "rgba(150, 50, 50, 0.7)"; else { if (!newRulerEnabled) return; (o = e).fillStyle = "rgba(50, 50, 50, 0.7)", equation.push(new Array(t, n)) } o.beginPath(), o.arc(t, n, a, 0, 2 * Math.PI, !0), o.closePath(), o.fill() } function sketchpad_mouseDown() { mouseDown = 1, drawDot(ctx, mouseX, mouseY, 8), rulerMode && newRulerEnabled && (rulerCtx.clearRect(0, 0, rulerCanvas.width, rulerCanvas.height), rulerStart = new Array(mouseX, mouseY)) } function sketchpad_mouseUp() { mouseDown = 0, rulerMode && newRulerEnabled ? (rulerEnd = new Array(mouseX, mouseY), showConfirmCalculationPrompt()) : pushEquation() } function sketchpad_mouseMove(e) { getMousePos(e), 1 === mouseDown && drawDot(ctx, mouseX, mouseY, 8) } function getMousePos(e) { e || (e = event), mouseX = e.layerX, mouseY = e.layerY } function sketchpad_touchStart() { getTouchPos(), drawDot(ctx, touchX, touchY, 8), event.preventDefault(), rulerMode && newRulerEnabled && (rulerStart = new Array(touchX, touchY)) } function sketchpad_touchEnd() { rulerMode && newRulerEnabled ? (rulerEnd = new Array(touchX, touchY), showConfirmCalculationPrompt()) : pushEquation() } function sketchpad_touchMove(e) { getTouchPos(e), drawDot(ctx, touchX, touchY, 8), event.preventDefault() } function getTouchPos(e) { if (e || (e = event), e.touches && 1 === e.touches.length) { var t = e.touches[0]; touchX = t.pageX, touchY = t.pageY - getOffset() } } document.addEventListener("DOMContentLoaded", function () { video = document.getElementById("video"), canvas = document.getElementById("canvas"), file = document.getElementById("file"), snapButton = document.getElementById("snapButton"), errorMsgElement = document.querySelector("span#errorMsg"), helpMenu = document.querySelector("#help"), notification = document.getElementById("notification"), controls = document.getElementById("controls"), rulerCanvas = document.getElementById("rulerCanvas"), init(), file.onchange = preview; var e = getOffset(); canvas.width = innerWidth, canvas.height = innerHeight - e, rulerCanvas.width = innerWidth, rulerCanvas.height = innerHeight - e, canvas.getContext && (ctx = canvas.getContext("2d")), ctx && (canvas.addEventListener("mousedown", sketchpad_mouseDown, !1), canvas.addEventListener("mousemove", sketchpad_mouseMove, !1), window.addEventListener("mouseup", sketchpad_mouseUp, !1), canvas.addEventListener("touchstart", sketchpad_touchStart, !1), canvas.addEventListener("touchend", sketchpad_touchEnd, !1), canvas.addEventListener("touchmove", sketchpad_touchMove, !1)), rulerCanvas.getContext && (rulerCtx = rulerCanvas.getContext("2d")) });